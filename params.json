{"name":"QuiXDM","tagline":"QuiXDM is an open-source implementation of an XQuery and XPath Data Model able to do Streaming Processing","body":"# QuiXDM\r\n**QuiXDM** is an open-source implementation of an [XQuery and XPath Data Model (XDM)](http://www.w3.org/TR/xpath-datamodel/) able to do Streaming Processing.\r\n\r\n# Getting Started\r\n\r\nTo install it\r\n*  Checkout this code. It's Java 1.6+ compliant\r\n*  Get access to Saxon 9.6: http://saxon.sourceforge.net/ \r\n\r\n# Why QuiXDM?\r\nThere is SAX and StAX and DOM out there for processing XML\r\n\r\n Feature\\API | SAX | StAX | DOM | **QuiXDM**\r\n------|-----|------|-----|-------\r\nin memory/streaming | streaming | streaming | in memory | **streaming**\r\npush/pull | push | pull | -- | **pull**\r\ndata model | low level XML | low level XML | low level XML | **XPath Data Model**\r\nhandle sequence | no | no | no | **yes**\r\n\r\n# How does it work?\r\nIt minimizes (as far as the XPath Data Model requires it) the number of XML information to manage\r\n```ANTLR\r\n// Here is the grammar of events\r\nsequence := START_SEQUENCE, document*, END_SEQUENCE\r\ndocument := START_DOCUMENT, (PROCESSING-INSTRUCTION|COMMENT)*, element, (PROCESSING-INSTRUCTION|COMMENT)*, END_DOCUMENT\r\nelement := START_ELEMENT, (NAMESPACE|ATTRIBUTE)*, (TEXT|element|PROCESSING-INSTRUCTION|COMMENT)*, END_ELEMENT\r\n```\r\n\r\nMostly look at [QuiXToken.java](https://github.com/innovimax/quixdm/blob/master/main/innovimax/quixproc/datamodel/QuiXToken.java)\r\n\r\n# Use\r\n## With Object creation (à la [javax.xml.stream.XMLEventReader](https://docs.oracle.com/javase/8/docs/api/index.html?javax/xml/stream/XMLEventReader.html))\r\nSimplest way to use, is to instanciate [innovimax.quixproc.datamodel.in.QuiXEventStreamReader.java](https://github.com/innovimax/quixdm/blob/master/main/innovimax/quixproc/datamodel/in/QuiXEventStreamReader.java)\r\n```java\r\nIterable<Source> sources = Arrays.asList(new Source[] {\r\n\t\tnew javax.xml.transform.stream.StreamSource(\"/tmp/file/file_aaa.xml\"),\t\r\n\t\tnew javax.xml.transform.stream.StreamSource(\"/tmp/file/file_aab.xml\")\t\r\n});\r\nQuiXEventStreamReader qesr = new QuiXEventStreamReader(sources);\r\nwhile(qesr.hasNext()) {\r\n\tSystem.out.println(qesr.next());\r\n}\r\n```\r\n## Lightweight iterator without Object creation (à la [javax.xml.stream.XMLStreamReader](https://docs.oracle.com/javase/8/docs/api/index.html?javax/xml/stream/XMLStreamReader.html))\r\n***TODO***\r\n# Contributors\r\n[Innovimax](http://innovimax.fr) and [INRIA Lille](http://www.inria.fr/centre/lille) is contributing to this work\r\n# Related Projects\r\nQuiXDM can be used standalone\r\n\r\nThis is the data model of QuiXPath and QuiXProc\r\n\r\nIt is part of two bigger projects :\r\n\r\n*  QuiXProc: https://github.com/innovimax/quixproc\r\n*  QuiXPath: https://github.com/innovimax/quixpath\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}